"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Slider } from "@/components/ui/slider"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Bot,
  Settings,
  TestTube,
  Save,
  CheckCircle,
  AlertCircle,
  MessageSquare,
  BarChart3,
  Shield,
  Server,
  RefreshCw,
  Database,
} from "lucide-react"
import { useAIConfig } from "@/hooks/useAIConfig"

export function AIConfig() {
  const { config, updateConfig, testConnection, isLoading, refreshConfig } = useAIConfig()
  const [localConfig, setLocalConfig] = useState(config)
  const [testResult, setTestResult] = useState<{ success: boolean; message: string } | null>(null)
  const [isSaving, setIsSaving] = useState(false)
  const [isSavingPrompts, setIsSavingPrompts] = useState(false)
  const [isRefreshing, setIsRefreshing] = useState(false)

  // Sincronizar com configura√ß√£o carregada
  useEffect(() => {
    setLocalConfig(config)
  }, [config])

  const saveConfig = async () => {
    setIsSaving(true)
    try {
      await updateConfig(localConfig)
      setTestResult({ success: true, message: "‚úÖ Configura√ß√£o salva na planilha com sucesso!" })
    } catch (error) {
      console.error("‚ùå Erro ao salvar configura√ß√£o:", error)
      setTestResult({ success: false, message: "‚ùå Erro ao salvar configura√ß√£o na planilha" })
    } finally {
      setIsSaving(false)
    }
  }

  const savePrompts = async () => {
    setIsSavingPrompts(true)
    setTestResult(null)

    try {
      console.log("üí¨ Salvando prompts personalizados na planilha...")

      await updateConfig(localConfig)
      setTestResult({ success: true, message: "‚úÖ Prompts salvos na planilha com sucesso!" })
    } catch (error) {
      console.error("‚ùå Erro ao salvar prompts:", error)
      setTestResult({ success: false, message: "‚ùå Erro ao salvar prompts na planilha" })
    } finally {
      setTimeout(() => {
        setIsSavingPrompts(false)
      }, 1500)
    }
  }

  const handleRefresh = async () => {
    setIsRefreshing(true)
    setTestResult(null)
    try {
      await refreshConfig()
      setTestResult({ success: true, message: "‚úÖ Configura√ß√£o atualizada da planilha!" })
    } catch (error) {
      setTestResult({ success: false, message: "‚ùå Erro ao atualizar configura√ß√£o" })
    } finally {
      setIsRefreshing(false)
    }
  }

  const handleTestConnection = async () => {
    setTestResult(null)
    const result = await testConnection()
    setTestResult(result)
  }

  const resetToDefaults = () => {
    const defaultConfig = {
      model: "gpt-4o-mini",
      temperature: 0.7,
      maxTokens: 1000,
      systemPrompt: `Voc√™ √© um assistente especializado em vendas e follow-up de or√ßamentos. 
Seu objetivo √© ajudar vendedores a fechar mais neg√≥cios atrav√©s de an√°lises inteligentes e sugest√µes estrat√©gicas.
Seja sempre pr√°tico, direto e focado em resultados.`,
      followupPrompt: `Analise este or√ßamento e forne√ßa sugest√µes espec√≠ficas para o pr√≥ximo follow-up em formato de lista clara:

‚Ä¢ **Pr√≥xima A√ß√£o:** [Qual a melhor abordagem para este cliente?]
‚Ä¢ **Timing:** [Quando fazer o pr√≥ximo contato?]
‚Ä¢ **Argumentos:** [Que argumentos usar?]
‚Ä¢ **Obje√ß√µes:** [Como superar poss√≠veis obje√ß√µes?]
‚Ä¢ **Estrat√©gia:** [Estrat√©gia espec√≠fica para este caso]

Use SEMPRE este formato de lista com bullets (‚Ä¢) e negrito (**) nos t√≠tulos.
Seja direto e pr√°tico. M√°ximo 5 pontos.`,
      analysisPrompt: `Analise este or√ßamento e forne√ßa:
1. Probabilidade de fechamento (0-100%)
2. Principais motivos que podem influenciar a decis√£o
3. Estrat√©gias recomendadas
4. Pr√≥ximos passos sugeridos`,
      isConfigured: true,
    }

    setLocalConfig(defaultConfig)
    console.log("üîÑ Configura√ß√£o resetada para padr√µes")
  }

  return (
    <div className="space-y-6">
      <Card className="bg-gradient-to-r from-green-50 to-blue-50 border-green-200">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Shield className="h-5 w-5 text-green-600" />
            Configura√ß√£o da IA - Modo Seguro
          </CardTitle>
          <CardDescription>
            Configura√ß√£o centralizada na planilha Google Sheets. API Key segura no servidor Vercel.
          </CardDescription>
          <div className="flex items-center gap-2">
            <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200">
              <Server className="h-3 w-3 mr-1" />
              API Key no Servidor
            </Badge>
            <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
              <Database className="h-3 w-3 mr-1" />
              Config na Planilha
            </Badge>
            <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
              <CheckCircle className="h-3 w-3 mr-1" />
              Centralizado
            </Badge>
          </div>
        </CardHeader>
      </Card>

      <Alert className="bg-blue-50 border-blue-200">
        <Database className="h-4 w-4 text-blue-600" />
        <AlertDescription className="text-blue-800">
          <strong>üìä Configura√ß√£o Centralizada:</strong> Os prompts e configura√ß√µes da IA s√£o lidos da aba "ConfigIA" da
          planilha Google Sheets. Isso garante que todos os usu√°rios usem a mesma configura√ß√£o e nunca percam as
          personaliza√ß√µes.
        </AlertDescription>
      </Alert>

      <Tabs defaultValue="basic" className="space-y-4">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="basic">‚öôÔ∏è B√°sico</TabsTrigger>
          <TabsTrigger value="prompts">üí¨ Prompts</TabsTrigger>
          <TabsTrigger value="advanced">üîß Avan√ßado</TabsTrigger>
        </TabsList>

        <TabsContent value="basic" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Settings className="h-5 w-5" />
                Configura√ß√µes B√°sicas
              </CardTitle>
              <CardDescription>Configure o modelo e par√¢metros da IA (salvo na planilha)</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="model">Modelo da IA</Label>
                <select
                  id="model"
                  value={localConfig.model}
                  onChange={(e) => setLocalConfig({ ...localConfig, model: e.target.value })}
                  className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="gpt-4o-mini">GPT-4o Mini (Recomendado)</option>
                  <option value="gpt-4o">GPT-4o (Mais Avan√ßado)</option>
                  <option value="gpt-3.5-turbo">GPT-3.5 Turbo (Mais R√°pido)</option>
                </select>
                <p className="text-xs text-gray-500 mt-1">
                  GPT-4o Mini oferece o melhor custo-benef√≠cio para an√°lises de vendas
                </p>
              </div>

              <div className="flex gap-2">
                <Button onClick={handleTestConnection} disabled={isLoading}>
                  {isLoading ? (
                    <>
                      <Bot className="h-4 w-4 mr-2 animate-spin" />
                      Testando...
                    </>
                  ) : (
                    <>
                      <TestTube className="h-4 w-4 mr-2" />
                      Testar Conex√£o
                    </>
                  )}
                </Button>

                <Button onClick={handleRefresh} disabled={isRefreshing} variant="outline">
                  {isRefreshing ? (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                      Atualizando...
                    </>
                  ) : (
                    <>
                      <RefreshCw className="h-4 w-4 mr-2" />
                      Atualizar da Planilha
                    </>
                  )}
                </Button>

                <Button onClick={saveConfig} disabled={isSaving}>
                  {isSaving ? (
                    <>
                      <Save className="h-4 w-4 mr-2 animate-spin" />
                      Salvando...
                    </>
                  ) : (
                    <>
                      <Save className="h-4 w-4 mr-2" />
                      Salvar na Planilha
                    </>
                  )}
                </Button>
              </div>

              {testResult && (
                <Alert variant={testResult.success ? "default" : "destructive"}>
                  {testResult.success ? <CheckCircle className="h-4 w-4" /> : <AlertCircle className="h-4 w-4" />}
                  <AlertDescription>{testResult.message}</AlertDescription>
                </Alert>
              )}

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="font-medium text-blue-900 mb-2">üìä Configura√ß√£o na Planilha:</h4>
                <div className="text-sm text-blue-800 space-y-1">
                  <p>
                    ‚úÖ <strong>Aba "ConfigIA"</strong> criada na planilha
                  </p>
                  <p>
                    ‚úÖ <strong>Configura√ß√£o centralizada</strong> para todos os usu√°rios
                  </p>
                  <p>
                    ‚úÖ <strong>Backup autom√°tico</strong> no Google Drive
                  </p>
                  <p>
                    ‚úÖ <strong>Nunca perde</strong> as personaliza√ß√µes
                  </p>
                </div>
                <div className="mt-3 p-2 bg-green-100 rounded border-l-4 border-green-400">
                  <p className="text-sm text-green-800">
                    <strong>üí° Dica:</strong> Voc√™ pode editar os prompts diretamente na planilha (aba ConfigIA) e
                    clicar em "Atualizar da Planilha" para carregar as mudan√ßas.
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="prompts" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MessageSquare className="h-5 w-5" />
                Prompts Personalizados
              </CardTitle>
              <CardDescription>
                Personalize como a IA analisa e responde. As altera√ß√µes s√£o salvas na planilha Google Sheets.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="systemPrompt">Prompt do Sistema</Label>
                <Textarea
                  id="systemPrompt"
                  placeholder="Defina a personalidade e comportamento da IA..."
                  value={localConfig.systemPrompt}
                  onChange={(e) => setLocalConfig({ ...localConfig, systemPrompt: e.target.value })}
                  rows={4}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">Define como a IA se comporta e qual √© seu papel principal</p>
                <p className="text-xs text-blue-600 mt-1">Caracteres: {localConfig.systemPrompt.length}</p>
              </div>

              <div>
                <Label htmlFor="followupPrompt">Prompt para Follow-ups</Label>
                <Textarea
                  id="followupPrompt"
                  placeholder="Instru√ß√µes para sugest√µes de follow-up..."
                  value={localConfig.followupPrompt}
                  onChange={(e) => setLocalConfig({ ...localConfig, followupPrompt: e.target.value })}
                  rows={8}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">Usado quando a IA sugere estrat√©gias de follow-up</p>
                <p className="text-xs text-blue-600 mt-1">Caracteres: {localConfig.followupPrompt.length}</p>
              </div>

              <div>
                <Label htmlFor="analysisPrompt">Prompt para An√°lises</Label>
                <Textarea
                  id="analysisPrompt"
                  placeholder="Instru√ß√µes para an√°lise de or√ßamentos..."
                  value={localConfig.analysisPrompt}
                  onChange={(e) => setLocalConfig({ ...localConfig, analysisPrompt: e.target.value })}
                  rows={4}
                  className="mt-1"
                />
                <p className="text-xs text-gray-500 mt-1">
                  Usado para an√°lises detalhadas de probabilidade de fechamento
                </p>
                <p className="text-xs text-blue-600 mt-1">Caracteres: {localConfig.analysisPrompt.length}</p>
              </div>

              <div className="flex gap-2">
                <Button onClick={resetToDefaults} variant="outline">
                  üîÑ Restaurar Padr√µes
                </Button>
                <Button
                  onClick={savePrompts}
                  className="bg-green-600 hover:bg-green-700 text-white"
                  disabled={isSavingPrompts}
                >
                  {isSavingPrompts ? (
                    <>
                      <Save className="h-4 w-4 mr-2 animate-spin" />
                      Salvando na Planilha...
                    </>
                  ) : (
                    <>
                      <Save className="h-4 w-4 mr-2" />
                      Salvar na Planilha
                    </>
                  )}
                </Button>
              </div>

              {testResult && (
                <Alert variant={testResult.success ? "default" : "destructive"} className="mt-4">
                  {testResult.success ? (
                    <CheckCircle className="h-4 w-4 text-green-600" />
                  ) : (
                    <AlertCircle className="h-4 w-4 text-red-600" />
                  )}
                  <AlertDescription className={testResult.success ? "text-green-800" : "text-red-800"}>
                    {testResult.message}
                  </AlertDescription>
                </Alert>
              )}

              <div className="bg-green-50 p-4 rounded-lg border border-green-200">
                <h4 className="font-medium text-green-900 mb-2">üìä Vantagens da Configura√ß√£o na Planilha:</h4>
                <ul className="text-sm text-green-800 space-y-1">
                  <li>
                    ‚úÖ <strong>Centralizado:</strong> Uma configura√ß√£o para todos os usu√°rios
                  </li>
                  <li>
                    ‚úÖ <strong>Persistente:</strong> Nunca perde as configura√ß√µes
                  </li>
                  <li>
                    ‚úÖ <strong>Multiplataforma:</strong> Funciona em qualquer dispositivo
                  </li>
                  <li>
                    ‚úÖ <strong>Backup autom√°tico:</strong> Salvo no Google Drive
                  </li>
                  <li>
                    ‚úÖ <strong>F√°cil edi√ß√£o:</strong> Pode alterar direto na planilha
                  </li>
                </ul>
              </div>

              <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                <h4 className="font-medium text-yellow-900 mb-2">üí° Dicas para Prompts Eficazes:</h4>
                <ul className="text-sm text-yellow-800 space-y-1">
                  <li>
                    ‚Ä¢ <strong>Seja espec√≠fico:</strong> Detalhe exatamente o que voc√™ quer
                  </li>
                  <li>
                    ‚Ä¢ <strong>Use exemplos:</strong> Mostre o formato desejado das respostas
                  </li>
                  <li>
                    ‚Ä¢ <strong>Defina o tom:</strong> Profissional, amig√°vel, t√©cnico, etc.
                  </li>
                  <li>
                    ‚Ä¢ <strong>Limite o escopo:</strong> Foque no que √© mais importante
                  </li>
                  <li>
                    ‚Ä¢ <strong>Teste sempre:</strong> Fa√ßa testes ap√≥s personalizar
                  </li>
                </ul>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="advanced" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <BarChart3 className="h-5 w-5" />
                Configura√ß√µes Avan√ßadas
              </CardTitle>
              <CardDescription>Ajuste fino dos par√¢metros da IA (salvo na planilha)</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div>
                <Label htmlFor="temperature">Criatividade (Temperature): {localConfig.temperature}</Label>
                <Slider
                  id="temperature"
                  min={0}
                  max={1}
                  step={0.1}
                  value={[localConfig.temperature]}
                  onValueChange={(value) => setLocalConfig({ ...localConfig, temperature: value[0] })}
                  className="mt-2"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>Mais Conservador</span>
                  <span>Mais Criativo</span>
                </div>
                <p className="text-xs text-gray-500 mt-1">
                  0.7 √© ideal para an√°lises de vendas - equilibra precis√£o e criatividade
                </p>
              </div>

              <div>
                <Label htmlFor="maxTokens">Tamanho M√°ximo da Resposta</Label>
                <input
                  id="maxTokens"
                  type="number"
                  min={100}
                  max={4000}
                  value={localConfig.maxTokens}
                  onChange={(e) =>
                    setLocalConfig({ ...localConfig, maxTokens: Number.parseInt(e.target.value) || 1000 })
                  }
                  className="w-full mt-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-xs text-gray-500 mt-1">
                  1000 tokens ‚âà 750 palavras. Mais tokens = respostas mais detalhadas (e mais caras)
                </p>
              </div>

              <div className="bg-yellow-50 p-4 rounded-lg">
                <h4 className="font-medium text-yellow-900 mb-2">üí° Dicas de Otimiza√ß√£o:</h4>
                <ul className="text-sm text-yellow-800 space-y-1">
                  <li>‚Ä¢ Temperature 0.7: Equilibrio ideal para vendas</li>
                  <li>‚Ä¢ Max Tokens 1000: Suficiente para an√°lises detalhadas</li>
                  <li>‚Ä¢ GPT-4o Mini: Melhor custo-benef√≠cio</li>
                  <li>‚Ä¢ Prompts espec√≠ficos geram melhores resultados</li>
                </ul>
              </div>

              <Button onClick={saveConfig} className="w-full" disabled={isSaving}>
                {isSaving ? (
                  <>
                    <Save className="h-4 w-4 mr-2 animate-spin" />
                    Salvando na Planilha...
                  </>
                ) : (
                  <>
                    <Save className="h-4 w-4 mr-2" />
                    Salvar Todas as Configura√ß√µes na Planilha
                  </>
                )}
              </Button>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}
