"use client"

import { useState, useEffect } from "react"

interface AIConfig {
  model: string
  temperature: number
  maxTokens: number
  systemPrompt: string
  followupPrompt: string
  analysisPrompt: string
  isConfigured: boolean
}

const defaultConfig: AIConfig = {
  model: "gpt-4o-mini",
  temperature: 0.7,
  maxTokens: 1000,
  systemPrompt:
    "Voc√™ √© um assistente especializado em vendas e follow-up de or√ßamentos. Seja profissional, objetivo e √∫til.",
  followupPrompt: `Analise este or√ßamento e forne√ßa sugest√µes espec√≠ficas para o pr√≥ximo follow-up em formato de lista clara:

‚Ä¢ **Pr√≥xima A√ß√£o:** [Qual a melhor abordagem para este cliente?]
‚Ä¢ **Timing:** [Quando fazer o pr√≥ximo contato?]
‚Ä¢ **Argumentos:** [Que argumentos usar?]
‚Ä¢ **Obje√ß√µes:** [Como superar poss√≠veis obje√ß√µes?]
‚Ä¢ **Estrat√©gia:** [Estrat√©gia espec√≠fica para este caso]

Use SEMPRE este formato de lista com bullets (‚Ä¢) e negrito (**) nos t√≠tulos.
Seja direto e pr√°tico. M√°ximo 5 pontos.`,
  analysisPrompt:
    "Analise este or√ßamento e forne√ßa: 1) Probabilidade de fechamento (0-100%), 2) Motivos que influenciam positivamente, 3) Estrat√©gias recomendadas, 4) Pr√≥ximos passos sugeridos.",
  isConfigured: false,
}

export function useAIConfig() {
  const [config, setConfig] = useState<AIConfig>(defaultConfig)
  const [isLoading, setIsLoading] = useState(false)

  // Fun√ß√£o para buscar configura√ß√£o da planilha usando a mesma API que o sistema j√° usa
  const fetchConfigFromSheet = async (): Promise<AIConfig | null> => {
    try {
      // Usar as mesmas configura√ß√µes que o sistema j√° usa para acessar a planilha
      const adminConfig = localStorage.getItem("admin-sheets-config")
      if (!adminConfig) {
        console.log("üîç [useAIConfig] Configura√ß√£o da planilha n√£o encontrada no localStorage")
        return null
      }

      const { apiKey, spreadsheetId } = JSON.parse(adminConfig)
      if (!apiKey || !spreadsheetId) {
        console.log("üîç [useAIConfig] API Key ou Spreadsheet ID n√£o configurados")
        return null
      }

      console.log("üìä [useAIConfig] Buscando configura√ß√£o da IA na planilha ConfigIA...")
      console.log("üîë [useAIConfig] Usando API Key:", apiKey.substring(0, 20) + "...")
      console.log("üìã [useAIConfig] Spreadsheet ID:", spreadsheetId)

      // Buscar dados da aba ConfigIA
      const range = "ConfigIA!A:B"
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodeURIComponent(range)}?key=${apiKey}`

      console.log("üåê [useAIConfig] URL da requisi√ß√£o:", url)

      const response = await fetch(url)
      console.log("üì° [useAIConfig] Status da resposta:", response.status, response.statusText)

      if (!response.ok) {
        const errorText = await response.text()
        console.error("‚ùå [useAIConfig] Erro na requisi√ß√£o:", errorText)
        return null
      }

      const data = await response.json()
      console.log("üìã [useAIConfig] Dados recebidos da planilha:", data)

      if (!data.values || data.values.length === 0) {
        console.warn("‚ö†Ô∏è [useAIConfig] Aba ConfigIA n√£o encontrada ou vazia")
        return null
      }

      // Processar dados da planilha
      const configData: Record<string, string> = {}

      // Pular cabe√ßalho (linha 1) e processar dados
      for (let i = 1; i < data.values.length; i++) {
        const row = data.values[i]
        if (row && row.length >= 2) {
          const tipo = String(row[0] || "").trim()
          const valor = String(row[1] || "").trim()

          if (tipo && valor) {
            configData[tipo] = valor
            console.log(`üìù [useAIConfig] ${tipo}: ${valor.substring(0, 50)}...`)
          }
        }
      }

      console.log("üîß [useAIConfig] Configura√ß√£o processada:", Object.keys(configData))

      // Montar configura√ß√£o final com dados da planilha
      const sheetConfig: AIConfig = {
        model: configData.model || defaultConfig.model,
        temperature: configData.temperature ? Number.parseFloat(configData.temperature) : defaultConfig.temperature,
        maxTokens: configData.maxTokens ? Number.parseInt(configData.maxTokens) : defaultConfig.maxTokens,
        systemPrompt: configData.systemPrompt || defaultConfig.systemPrompt,
        followupPrompt: configData.followupPrompt || defaultConfig.followupPrompt,
        analysisPrompt: configData.analysisPrompt || defaultConfig.analysisPrompt,
        isConfigured: true,
      }

      console.log("‚úÖ [useAIConfig] Configura√ß√£o da IA carregada da planilha:", {
        model: sheetConfig.model,
        temperature: sheetConfig.temperature,
        maxTokens: sheetConfig.maxTokens,
        systemPromptLength: sheetConfig.systemPrompt.length,
        followupPromptLength: sheetConfig.followupPrompt.length,
        analysisPromptLength: sheetConfig.analysisPrompt.length,
      })

      return sheetConfig
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao buscar configura√ß√£o da planilha:", error)
      return null
    }
  }

  // Fun√ß√£o para carregar configura√ß√£o sempre da planilha
  const loadConfig = async () => {
    setIsLoading(true)

    try {
      console.log("üîÑ [useAIConfig] Carregando configura√ß√£o da IA...")

      // Sempre tentar buscar da planilha primeiro
      const sheetConfig = await fetchConfigFromSheet()

      if (sheetConfig) {
        setConfig(sheetConfig)
        console.log("‚úÖ [useAIConfig] Configura√ß√£o carregada da planilha com sucesso")
      } else {
        // Fallback para configura√ß√£o padr√£o
        console.log("üîÑ [useAIConfig] Usando configura√ß√£o padr√£o (planilha n√£o acess√≠vel)")
        setConfig({ ...defaultConfig, isConfigured: true })
      }
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao carregar configura√ß√£o:", error)
      setConfig({ ...defaultConfig, isConfigured: true })
    } finally {
      setIsLoading(false)
    }
  }

  // Carregar configura√ß√£o quando o hook √© inicializado
  useEffect(() => {
    loadConfig()
  }, [])

  const updateConfig = async (newConfig: AIConfig) => {
    try {
      console.log("üíæ [useAIConfig] Atualizando configura√ß√£o...")

      // Atualizar estado local imediatamente
      setConfig({ ...newConfig, isConfigured: true })

      console.log("‚úÖ [useAIConfig] Configura√ß√£o atualizada localmente")
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao atualizar configura√ß√£o:", error)
    }
  }

  const testConnection = async (): Promise<{ success: boolean; message: string }> => {
    setIsLoading(true)
    try {
      console.log("üß™ [useAIConfig] Testando conex√£o com IA usando API Key do servidor...")

      const response = await fetch("/api/ai-chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          message: "Teste de conex√£o - responda apenas 'Conex√£o OK'",
          budget: null,
          config: {
            model: config.model,
            temperature: config.temperature,
            maxTokens: 100,
            systemPrompt: "Voc√™ √© um assistente de teste. Responda apenas 'Conex√£o OK'.",
          },
        }),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ [useAIConfig] Teste de conex√£o bem-sucedido:", data)
        return { success: true, message: "‚úÖ Conex√£o com OpenAI estabelecida com sucesso!" }
      } else {
        const errorData = await response.json()
        console.error("‚ùå [useAIConfig] Erro no teste de conex√£o:", errorData)
        return { success: false, message: `‚ùå Erro: ${errorData.error || "Falha na conex√£o"}` }
      }
    } catch (error: any) {
      console.error("‚ùå [useAIConfig] Erro de rede no teste:", error)
      return { success: false, message: `‚ùå Erro de rede: ${error.message}` }
    } finally {
      setIsLoading(false)
    }
  }

  const refreshConfig = async () => {
    console.log("üîÑ [useAIConfig] For√ßando atualiza√ß√£o da configura√ß√£o...")
    await loadConfig()
  }

  return {
    config,
    updateConfig,
    testConnection,
    isLoading,
    refreshConfig,
    reloadConfig: loadConfig,
  }
}
