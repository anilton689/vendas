"use client"

import { useState, useEffect } from "react"

interface AIConfig {
  model: string
  temperature: number
  maxTokens: number
  systemPrompt: string
  followupPrompt: string
  analysisPrompt: string
  isConfigured: boolean
}

const defaultConfig: AIConfig = {
  model: "gpt-4o-mini",
  temperature: 0.7,
  maxTokens: 1000,
  systemPrompt:
    "Voc√™ √© um assistente especializado em vendas e follow-up de or√ßamentos. Seja profissional, objetivo e √∫til.",
  followupPrompt: `Analise este or√ßamento e forne√ßa sugest√µes espec√≠ficas para o pr√≥ximo follow-up em formato de lista clara:

‚Ä¢ **Pr√≥xima A√ß√£o:** [Qual a melhor abordagem para este cliente?]
‚Ä¢ **Timing:** [Quando fazer o pr√≥ximo contato?]
‚Ä¢ **Argumentos:** [Que argumentos usar?]
‚Ä¢ **Obje√ß√µes:** [Como superar poss√≠veis obje√ß√µes?]
‚Ä¢ **Estrat√©gia:** [Estrat√©gia espec√≠fica para este caso]

Use SEMPRE este formato de lista com bullets (‚Ä¢) e negrito (**) nos t√≠tulos.
Seja direto e pr√°tico. M√°ximo 5 pontos.`,
  analysisPrompt:
    "Analise este or√ßamento e forne√ßa: 1) Probabilidade de fechamento (0-100%), 2) Motivos que influenciam positivamente, 3) Estrat√©gias recomendadas, 4) Pr√≥ximos passos sugeridos.",
  isConfigured: false,
}

export function useAIConfig() {
  const [config, setConfig] = useState<AIConfig>(defaultConfig)
  const [isLoading, setIsLoading] = useState(false)
  const [lastFetch, setLastFetch] = useState<number>(0)

  // Fun√ß√£o para buscar configura√ß√£o da planilha
  const fetchConfigFromSheet = async (): Promise<AIConfig | null> => {
    try {
      const adminConfig = localStorage.getItem("admin-sheets-config")
      if (!adminConfig) {
        console.log("üîç [useAIConfig] Configura√ß√£o da planilha n√£o encontrada")
        return null
      }

      const { apiKey, spreadsheetId } = JSON.parse(adminConfig)
      if (!apiKey || !spreadsheetId) {
        console.log("üîç [useAIConfig] API Key ou Spreadsheet ID n√£o configurados")
        return null
      }

      console.log("üìä [useAIConfig] Buscando configura√ß√£o da IA na planilha...")

      const range = "ConfigIA!A:B"
      const encodedRange = encodeURIComponent(range)
      const url = `https://sheets.googleapis.com/v4/spreadsheets/${spreadsheetId}/values/${encodedRange}?key=${apiKey}`

      const response = await fetch(url)

      if (!response.ok) {
        console.error("‚ùå [useAIConfig] Erro ao buscar ConfigIA:", response.status, response.statusText)
        return null
      }

      const data = await response.json()

      if (!data.values || data.values.length === 0) {
        console.warn("‚ö†Ô∏è [useAIConfig] Aba ConfigIA n√£o encontrada ou vazia")
        return null
      }

      console.log("üìã [useAIConfig] Dados da aba ConfigIA:", data.values)

      // Processar dados da planilha
      const configData: any = {}

      // Pular cabe√ßalho (linha 1) e processar dados
      for (let i = 1; i < data.values.length; i++) {
        const row = data.values[i]
        if (row && row.length >= 2) {
          const tipo = String(row[0] || "").trim()
          const valor = String(row[1] || "").trim()

          if (tipo && valor) {
            configData[tipo] = valor
          }
        }
      }

      console.log("üîß [useAIConfig] Configura√ß√£o processada:", configData)

      // Montar configura√ß√£o final
      const sheetConfig: AIConfig = {
        model: configData.model || defaultConfig.model,
        temperature: Number.parseFloat(configData.temperature) || defaultConfig.temperature,
        maxTokens: Number.parseInt(configData.maxTokens) || defaultConfig.maxTokens,
        systemPrompt: configData.systemPrompt || defaultConfig.systemPrompt,
        followupPrompt: configData.followupPrompt || defaultConfig.followupPrompt,
        analysisPrompt: configData.analysisPrompt || defaultConfig.analysisPrompt,
        isConfigured: true,
      }

      console.log("‚úÖ [useAIConfig] Configura√ß√£o da IA carregada da planilha:", {
        model: sheetConfig.model,
        temperature: sheetConfig.temperature,
        maxTokens: sheetConfig.maxTokens,
        systemPromptLength: sheetConfig.systemPrompt.length,
        followupPromptLength: sheetConfig.followupPrompt.length,
        analysisPromptLength: sheetConfig.analysisPrompt.length,
      })

      return sheetConfig
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao buscar configura√ß√£o da planilha:", error)
      return null
    }
  }

  // Fun√ß√£o para carregar configura√ß√£o (planilha + cache)
  const loadConfig = async () => {
    setIsLoading(true)

    try {
      // Verificar cache (atualizar a cada 5 minutos)
      const now = Date.now()
      const cacheExpiry = 5 * 60 * 1000 // 5 minutos

      if (now - lastFetch < cacheExpiry) {
        console.log("üì¶ [useAIConfig] Usando configura√ß√£o em cache")
        setIsLoading(false)
        return
      }

      // Tentar buscar da planilha
      const sheetConfig = await fetchConfigFromSheet()

      if (sheetConfig) {
        setConfig(sheetConfig)
        setLastFetch(now)

        // Salvar cache local para performance
        localStorage.setItem(
          "ai-config-cache",
          JSON.stringify({
            config: sheetConfig,
            timestamp: now,
          }),
        )

        console.log("‚úÖ [useAIConfig] Configura√ß√£o atualizada da planilha")
      } else {
        // Fallback: tentar cache local
        const cachedData = localStorage.getItem("ai-config-cache")
        if (cachedData) {
          try {
            const { config: cachedConfig } = JSON.parse(cachedData)
            setConfig(cachedConfig)
            console.log("üì¶ [useAIConfig] Usando configura√ß√£o do cache local")
          } catch (error) {
            console.error("‚ùå [useAIConfig] Erro ao carregar cache:", error)
            setConfig({ ...defaultConfig, isConfigured: true })
          }
        } else {
          console.log("üîÑ [useAIConfig] Usando configura√ß√£o padr√£o")
          setConfig({ ...defaultConfig, isConfigured: true })
        }
      }
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao carregar configura√ß√£o:", error)
      setConfig({ ...defaultConfig, isConfigured: true })
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    loadConfig()
  }, [])

  const updateConfig = async (newConfig: AIConfig) => {
    try {
      console.log("üíæ [useAIConfig] Atualizando configura√ß√£o na planilha...")

      // Atualizar estado local imediatamente
      setConfig({ ...newConfig, isConfigured: true })

      // Tentar salvar na planilha via Apps Script
      const writeEndpoint = localStorage.getItem("write-endpoint")
      if (!writeEndpoint) {
        console.warn("‚ö†Ô∏è [useAIConfig] URL do Apps Script n√£o configurada")
        return
      }

      // Preparar dados para envio
      const configData = {
        action: "updateConfigIA",
        data: {
          model: newConfig.model,
          temperature: newConfig.temperature.toString(),
          maxTokens: newConfig.maxTokens.toString(),
          systemPrompt: newConfig.systemPrompt,
          followupPrompt: newConfig.followupPrompt,
          analysisPrompt: newConfig.analysisPrompt,
        },
      }

      console.log("üì§ [useAIConfig] Enviando configura√ß√£o para Apps Script:", configData)

      // Criar form para envio
      const form = document.createElement("form")
      form.method = "POST"
      form.action = writeEndpoint
      form.style.display = "none"

      const input = document.createElement("input")
      input.type = "hidden"
      input.name = "json_data"
      input.value = JSON.stringify(configData)
      form.appendChild(input)

      document.body.appendChild(form)
      form.submit()
      document.body.removeChild(form)

      console.log("‚úÖ [useAIConfig] Configura√ß√£o enviada para a planilha")

      // Atualizar cache local
      const now = Date.now()
      localStorage.setItem(
        "ai-config-cache",
        JSON.stringify({
          config: newConfig,
          timestamp: now,
        }),
      )
      setLastFetch(now)
    } catch (error) {
      console.error("‚ùå [useAIConfig] Erro ao atualizar configura√ß√£o:", error)
    }
  }

  const testConnection = async (): Promise<{ success: boolean; message: string }> => {
    setIsLoading(true)
    try {
      console.log("üß™ [useAIConfig] Testando conex√£o com IA usando API Key do servidor...")

      const response = await fetch("/api/ai-chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          message: "Teste de conex√£o - responda apenas 'Conex√£o OK'",
          budget: null,
          config: {
            model: config.model,
            temperature: config.temperature,
            maxTokens: 100,
            systemPrompt: "Voc√™ √© um assistente de teste. Responda apenas 'Conex√£o OK'.",
          },
        }),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ [useAIConfig] Teste de conex√£o bem-sucedido:", data)
        return { success: true, message: "‚úÖ Conex√£o com OpenAI estabelecida com sucesso!" }
      } else {
        const errorData = await response.json()
        console.error("‚ùå [useAIConfig] Erro no teste de conex√£o:", errorData)
        return { success: false, message: `‚ùå Erro: ${errorData.error || "Falha na conex√£o"}` }
      }
    } catch (error: any) {
      console.error("‚ùå [useAIConfig] Erro de rede no teste:", error)
      return { success: false, message: `‚ùå Erro de rede: ${error.message}` }
    } finally {
      setIsLoading(false)
    }
  }

  const refreshConfig = async () => {
    setLastFetch(0) // For√ßar atualiza√ß√£o
    await loadConfig()
  }

  return {
    config,
    updateConfig,
    testConnection,
    isLoading,
    refreshConfig,
    reloadConfig: loadConfig,
  }
}
